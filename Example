import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.jdbc.support.rowset.SqlRowSetMetaData;

class YourClassTest {

    @InjectMocks
    private YourClass yourClass;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private SqlRowSet sqlRowSet;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetEmailCategories() {
        // Mock SQL query result
        when(jdbcTemplate.queryForRowSet(anyString(), any(Object[].class))).thenReturn(sqlRowSet);

        // Mock metadata
        SqlRowSetMetaData metaData = mock(SqlRowSetMetaData.class);
        when(metaData.getColumnCount()).thenReturn(2);
        when(metaData.getColumnLabel(1)).thenReturn("NAME");
        when(metaData.getColumnLabel(2)).thenReturn("TEMPLATE_ID");

        when(sqlRowSet.getMetaData()).thenReturn(metaData);

        // Mock data
        when(sqlRowSet.next()).thenReturn(true).thenReturn(false);
        when(sqlRowSet.getString("NAME")).thenReturn("Category1");
        when(sqlRowSet.getLong("TEMPLATE_ID")).thenReturn(1L);

        // Call the method
        HashMap<String, List<Long>> result = yourClass.getEmailCategories("CategoryType", "CategoryKeyword");

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.size());
        assertTrue(result.containsKey("Category1"));
        assertEquals(Arrays.asList(1L), result.get("Category1"));
    }

    // Add more test cases as needed to cover different scenarios
}
